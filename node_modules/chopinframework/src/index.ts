class Oracle {
  constructor(protected readonly callbackUrl: string) { }

  public async notarize<T>(getter: () => T) {
    const value = await getter();
    await fetch(this.callbackUrl, {
      method: "POST",
      body: JSON.stringify(value)
    })
    return value;
  }

  public fetch: typeof fetch = async (
    ...args
  ) => {
    const response = await this.notarize(() => fetch(...args).then(async (response) => ({
      status: response.status,
      statusText: response.statusText,
      headers: Array.from(response.headers.entries()),
      body: new Uint8Array(await response.arrayBuffer()), // store in a typed array
    })));

    return new Response(response.body, {
      status: response.status,
      statusText: response.statusText,
      headers: response.headers
    });
  };

  public now() {
    return this.notarize(() => Date.now());
  }

  public random() {
    return this.notarize(() => Math.random());
  }
}

export { Oracle }